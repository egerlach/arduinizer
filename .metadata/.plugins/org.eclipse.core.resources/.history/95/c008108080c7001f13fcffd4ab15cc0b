//*****************************************************************************
//
// THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
// OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
// USE OF THIS SOFTWARE FOR COMMERCIAL DEVELOPMENT AND/OR EDUCATION IS SUBJECT
// TO A CURRENT END USER LICENSE AGREEMENT (COMMERCIAL OR EDUCATIONAL) WITH
// CODE RED TECHNOLOGIES LTD.
//
//*****************************************************************************

#include "LPC13xx.h"                        /* LPC13xx definitions */
#include "timer16.h"
#include "clkconfig.h"
#include "gpio.h"
#include "Arduino.h"
#include "Math.h"

// ADC code from http://ics.nxp.com "Sample Code Bundle for LPC13xx Peripheral's using Keil's MDK-ARM"
// todo: Just import the library instead of pasting code.
#define ADC_INTERRUPT_FLAG  1	/* 1 is interrupt driven, 0 is polling */
#define BURST_MODE          0   /* Burst mode works in interrupt driven mode only. */
#define ADC_DEBUG           0

#define ADC_OFFSET          0x10
#define ADC_INDEX           4

#define ADC_DONE            0x80000000
#define ADC_OVERRUN         0x40000000
#define ADC_ADINT           0x00010000

#define ADC_NUM             8			/* for LPC13xx */
#define ADC_CLK             1000000		/* set to 1Mhz */

volatile uint32_t ADCValue[ADC_NUM];
volatile uint32_t ADCIntDone = 0;

/*****************************************************************************
** Function name:		ADCInit
**
** Descriptions:		initialize ADC channel
**
** parameters:			ADC clock rate
** Returned value:		None
**
*****************************************************************************/
void ADCInit( uint32_t ADC_Clk )
{
  uint32_t i;

  /* Disable Power down bit to the ADC block. */
  LPC_SYSCON->PDRUNCFG &= ~(0x1<<4);

  /* Enable AHB clock to the ADC. */
  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<13);

  for ( i = 0; i < ADC_NUM; i++ )
  {
	ADCValue[i] = 0x0;
  }
  /* Unlike some other pings, for ADC test, all the pins need
  to set to analog mode. Bit 7 needs to be cleared according
  to design team. */
#ifdef __JTAG_DISABLED
  LPC_IOCON->R_PIO0_11 &= ~0x8F; /*  ADC I/O config */
  LPC_IOCON->R_PIO0_11 |= 0x02;  /* ADC IN0 */
  LPC_IOCON->R_PIO1_0  &= ~0x8F;
  LPC_IOCON->R_PIO1_0  |= 0x02;  /* ADC IN1 */
  LPC_IOCON->R_PIO1_1  &= ~0x8F;
  LPC_IOCON->R_PIO1_1  |= 0x02;  /* ADC IN2 */
  LPC_IOCON->R_PIO1_2  &= ~0x8F;
  LPC_IOCON->R_PIO1_2  |= 0x02;  /* ADC IN3 */
#ifdef __SWD_DISABLED
  LPC_IOCON->SWDIO_PIO1_3   &= ~0x8F;
  LPC_IOCON->SWDIO_PIO1_3   |= 0x02;  /* ADC IN4 */
#endif
#endif
  LPC_IOCON->PIO1_4    &= ~0x8F; /* Clear bit7, change to analog mode. */
  LPC_IOCON->PIO1_4    |= 0x01;  /* ADC IN5 */
  LPC_IOCON->PIO1_10   &= ~0x8F; /* Clear bit7, change to analog mode. */
  LPC_IOCON->PIO1_10   |= 0x01;  /* ADC IN6 */
  LPC_IOCON->PIO1_11   &= ~0x8F; /* Clear bit7, change to analog mode. */
  LPC_IOCON->PIO1_11   |= 0x01;  /* ADC IN7 */

  LPC_ADC->CR = ( 0x01 << 0 ) |  /* SEL=1,select channel 0~7 on ADC0 */
	(((ADC_CLK/LPC_SYSCON->SYSAHBCLKDIV)/SystemCoreClock-1)<<8) |  /* CLKDIV = Fpclk / 1000000 - 1 */
	( 0 << 16 ) | 		/* BURST = 0, no BURST, software controlled */
	( 0 << 17 ) |  		/* CLKS = 0, 11 clocks/10 bits */
	( 1 << 21 ) |  		/* PDN = 1, normal operation */
	( 0 << 22 ) |  		/* TEST1:0 = 00 */
	( 0 << 24 ) |  		/* START = 0 A/D conversion stops */
	( 0 << 27 );		/* EDGE = 0 (CAP/MAT singal falling,trigger A/D conversion) */

  /* If POLLING, no need to do the following */
#if ADC_INTERRUPT_FLAG
  NVIC_EnableIRQ(ADC_IRQn);
  LPC_ADC->INTEN = 0x1FF;		/* Enable all interrupts */
#endif
  return;
}

/*****************************************************************************
** Function name:		ADCRead
**
** Descriptions:		Read ADC channel
**
** parameters:			Channel number
** Returned value:		Value read, if interrupt driven, return channel #
**
*****************************************************************************/
uint32_t ADCRead( uint8_t channelNum )
{
#if !ADC_INTERRUPT_FLAG
  uint32_t regVal, ADC_Data;
#endif

  /* channel number is 0 through 7 */
  if ( channelNum >= ADC_NUM )
  {
	channelNum = 0;		/* reset channel number to 0 */
  }
  LPC_ADC->CR &= 0xFFFFFF00;
  LPC_ADC->CR |= (1 << 24) | (1 << channelNum);
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
  while ( 1 )			/* wait until end of A/D convert */
  {
	regVal = *(volatile unsigned long *)(LPC_ADC_BASE
			+ ADC_OFFSET + ADC_INDEX * channelNum);
	/* read result of A/D conversion */
	if ( regVal & ADC_DONE )
	{
	  break;
	}
  }

  LPC_ADC->CR &= 0xF8FFFFFF;	/* stop ADC now */
  if ( regVal & ADC_OVERRUN )	/* save data when it's not overrun, otherwise, return zero */
  {
	return ( 0 );
  }
  ADC_Data = ( regVal >> 6 ) & 0x3FF;
  return ( ADC_Data );	/* return A/D conversion value */
#else
  return ( channelNum );	/* if it's interrupt driven, the ADC reading is
							done inside the handler. so, return channel number */
#endif
}

#define PWM_PERIOD 14399
// todo: pin is ignored.

// Code from knowledgebase.nxp.com, thread 593 - Brinkand
void pwm(byte pin, word frequency, byte duty)
{
	  // PWM output: 16bit_timer1
	  //init_timer16(1, 14399); // 14399 gives 5kHz with 72MHz clock.
	  // Timer set up for 5KHz 20% DC PWM on MAT0 and
	  // 2.5kHz toggling signal with phase offset at MAT1.
	  // This is not for any specific application, just for testing.
	  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<8);  // Enable clock to timer 1
	  //LPC_IOCON->PIO1_8           &= ~0x07;    /*  Timer1_16 I/O config  */
	  //LPC_IOCON->PIO1_8           |= 0x01;        /* Timer1_16 CAP0    - set bit 1*/
	  // default: 0xD0 = 0b11010000 (at boot) - after this: 0b11010001 - means MAT0 enabled + pull up + some undocumented bits.
	  // Frankly there is no reason for pull-up on output.
	  //LPC_IOCON->PIO1_9           &= ~0x07;                               // - remove bits 0,1 & 2
	  LPC_IOCON->PIO1_9           &= ~0x1F;                               // - remove bits 0,1 & 2 and pull resistors
	  LPC_IOCON->PIO1_9           |= 0x01;        /* Timer1_16 MAT0 */ //- set bit 1
	  //LPC_IOCON->PIO1_10          &= ~0x07;
	  LPC_IOCON->PIO1_10          &= ~0x1F;     // - remove bits 0,1 & 2 and pull resistors
	  LPC_IOCON->PIO1_10          |= 0x02;        /* Timer1_16 MAT1 */

	  /* Enable the TIMER1 Interrupt */
	  // NVIC_EnableIRQ(TIMER_16_1_IRQn);  // No interrupt needed.

	  LPC_TMR16B1->MCR = 0x0400;        /* Reset at MR3*/
	  //LPC_TMR16B1->MCR |= 0x0400;        /* MR1 setup*/
	  // LPC_TMR16B1->MR0 = 11421;            /* Match register 0 - Turn on time: 2879 = 20% duty cycle */
	  LPC_TMR16B1->MR0 = (0x100 - duty) * PWM_PERIOD / 0x100;            /* Match register 0 - Turn on time: 2879 = 20% duty cycle */
	  LPC_TMR16B1->MR1 = 7000;            /* Match register 1 - no PWM - toggle test */
	  //LPC_TMR16B1->MR2 = 0;                /* Match register 2 - not used */
	  LPC_TMR16B1->MR3 = 14399;          /* Match register 3 - cycle length */
	  LPC_TMR16B1->EMR = 0xC2;            /* External Match register Settings for PWM channel have no effect.*/
	  LPC_TMR16B1->PWMC = 0x01;             /* PWMC register -MAT0 is PWM. */
	  // PIO1_9 = TC16B1_MAT0
	  GPIOSetDir( 1, 9, 1 );  // Set as output
	  // PIO1_10 = TC16B1_MAT1
	  GPIOSetDir( 1, 10, 1 ); // set as output
	  LPC_TMR16B1->TCR = 1;   // Enable timer 1
}

extern volatile uint32_t timer16_0_counter;

// Pins and ports
typedef struct
{
	byte Port;
	byte Pin;
} AM_LCPXPin;

AM_LCPXPin AM_Pins[] =
{
	{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 7}, {0, 8}, {0, 9}, {0, 10}, {0, 11},
	{1, 0}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}, {1, 9}, {1, 10}, {1, 11},
	{2, 0}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8}, {2, 9}, {2, 10}, {2, 11},
	{3, 0}, {3, 1}, {3, 2}, {3, 3}
};

volatile uint32_t g_systemMicroTicks;                            /* counts 1 microsecond */
volatile uint32_t g_systemMacroTicks;                            /* counts 2^32 microseconds (about 1.1 hrs) */
volatile uint32_t g_systemMilliTicks;                            /* counts 2^32 milliseconds (about 49 days) */

extern volatile uint32_t timer16_0_counter;

#define MICROSECONDSPERMILLISECOND 1000

volatile uint32_t timer16_0_counter = 0;
volatile uint32_t timer16_1_counter = 0;



/******************************************************************************
** Function name:		TIMER_0_IRQHandler
**
** Descriptions:		Timer/Counter 0 interrupt handler
**						executes each 10ms @ 60 MHz CPU Clock
**
** parameters:			None
** Returned value:		None
**
******************************************************************************/
void TIMER16_0_IRQHandler(void)
{
  LPC_TMR16B0->IR = 1;			/* clear interrupt flag */
  timer16_0_counter++;
  return;
}

/******************************************************************************
** Function name:		TIMER_1_IRQHandler
**
** Descriptions:		Timer/Counter 1 interrupt handler
**						executes each 10ms @ 60 MHz CPU Clock
**
** parameters:			None
** Returned value:		None
**
******************************************************************************/
void TIMER16_1_IRQHandler(void)
{
  LPC_TMR16B1->IR = 1;			/* clear interrupt flag */
  timer16_1_counter++;
  return;
}

/*----------------------------------------------------------------------------
  SysTick_Handler
 *----------------------------------------------------------------------------*/
// void SysTick_Handler(void)
// {
	/*
	g_systemMicroTicks++;                        // increment counter necessary in Delay()
	if(0 == g_systemMicroTicks)					// @todo: Will the overhead make this inaccurate? If so, increase sample frequency.
	{
		g_systemMacroTicks++;
	}
	if(0 == g_systemMicroTicks  % MICROSECONDSPERMILLISECOND)
	{
		g_systemMilliTicks++;
	}
	*/
// }

/*
// Randomizing.
// or Constants for mersenne type MT19937:
#define MERS_N   624
#define MERS_M   397
#define MERS_R   31
#define MERS_U   11
#define MERS_S   7
#define MERS_T   15
#define MERS_L   18
#define MERS_A   0x9908B0DF
#define MERS_B   0x9D2C5680
#define MERS_C   0xEFC60000

unsigned long mt[MERS_N];                // State vector
int mti;                            // Index into mt
unsigned long LastInterval;              // Last interval length for IRandomX
unsigned long RLimit;                    // Rejection limit used by IRandomX
void randomInit0(int seed)
{
   // Seed generator
   const uint32_t factor = 1812433253UL;
   mt[0]= seed;
   for (mti=1; mti < MERS_N; mti++) {
      mt[mti] = (factor * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
   }
}

void randomInit(int seed) {
   // Initialize and seed
	randomInit0(seed);

   // Randomize some more
   int i;
   for (i = 0; i < 37; i++)
   {
	   BRandom();
   }
}

void randomInitByArray(int const seeds[], int NumSeeds)
{
   // Seed by more than 32 bits
   int i;
   int j, k;

   // Initialize
   randomInit0(19650218);

   if (NumSeeds <= 0) return;

   // Randomize mt[] using whole seeds[] array
   i = 1;  j = 0;
   k = (MERS_N > NumSeeds ? MERS_N : NumSeeds);
   for (; k; k--) {
      mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525UL)) + (uint32_t)seeds[j] + j;
      i++; j++;
      if (i >= MERS_N) {mt[0] = mt[MERS_N-1]; i=1;}
      if (j >= NumSeeds) j=0;}
   for (k = MERS_N-1; k; k--) {
      mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941UL)) - i;
      if (++i >= MERS_N) {mt[0] = mt[MERS_N-1]; i=1;}}
   mt[0] = 0x80000000UL;  // MSB is 1; assuring non-zero initial array

   // Randomize some more
   mti = 0;
   int i;
   for (i = 0; i <= MERS_N; i++)
   {
   BRandom();
   }
}


unsigned int bRandom() {
   // Generate 32 random bits
   uint32_t y;

   if (mti >= MERS_N) {
      // Generate MERS_N words at one time
      const uint32_t LOWER_MASK = (1LU << MERS_R) - 1;       // Lower MERS_R bits
      const uint32_t UPPER_MASK = 0xFFFFFFFF << MERS_R;      // Upper (32 - MERS_R) bits
      static const uint32_t mag01[2] = {0, MERS_A};

      int kk;
      for (kk=0; kk < MERS_N-MERS_M; kk++) {
         y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
         mt[kk] = mt[kk+MERS_M] ^ (y >> 1) ^ mag01[y & 1];}

      for (; kk < MERS_N-1; kk++) {
         y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
         mt[kk] = mt[kk+(MERS_M-MERS_N)] ^ (y >> 1) ^ mag01[y & 1];}

      y = (mt[MERS_N-1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
      mt[MERS_N-1] = mt[MERS_M-1] ^ (y >> 1) ^ mag01[y & 1];
      mti = 0;
   }
   y = mt[mti++];

   // Tempering (May be omitted):
   y ^=  y >> MERS_U;
   y ^= (y << MERS_S) & MERS_B;
   y ^= (y << MERS_T) & MERS_C;
   y ^=  y >> MERS_L;

   return y;
}


double random() {
   // Output random float number in the interval 0 <= x < 1
   // Multiply by 2^(-32)
   return (double)BRandom() * (1./(65536.*65536.));
}


int CRandomMersenne::iRandom(int min, int max)
{
   // Output random integer in the interval min <= x <= max
   // Relative error on frequencies < 2^-32
   if (max <= min) {
      if (max == min) return min; else return 0x80000000;
   }
   // Multiply interval with random and truncate
   int r = int((double)(uint32_t)(max - min + 1) * Random() + min);
   if (r > max) r = max;
   return r;
}


int iRandomX(int min, int max)
{
   // Output random integer in the interval min <= x <= max
   // Each output value has exactly the same probability.
   // This is obtained by rejecting certain bit values so that the number
   // of possible bit values is divisible by the interval length
   if (max <= min) {
      if (max == min) return min; else return 0x80000000;
   }

   // 64 bit integers not available. Use modulo method
   uint32_t interval;                    // Length of interval
   uint32_t bran;                        // Random bits
   uint32_t iran;                        // bran / interval
   uint32_t remainder;                   // bran % interval

   interval = uint32_t(max - min + 1);
   if (interval != LastInterval) {
      // Interval length has changed. Must calculate rejection limit
      // Reject when iran = 2^32 / interval
      // We can't make 2^32 so we use 2^32-1 and correct afterwards
      RLimit = (uint32_t)0xFFFFFFFF / interval;
      if ((uint32_t)0xFFFFFFFF % interval == interval - 1) RLimit++;
   }
   do { // Rejection loop
      bran = BRandom();
      iran = bran / interval;
      remainder = bran % interval;
   } while (iran >= RLimit);
   // Convert back to signed and return result
   return (int32_t)remainder + min;
}
*/

/////////////////////////////////////////////
// Public functions.
/////////////////////////////////////////////

// Arduino event functions.
void setup();	// Called once.
void loop();	// Called repeatedly between maintenance actions.

//Arduino API functions
void pinMode(byte pin, byte mode)
{
	GPIOSetDir(AM_Pins[pin].Port, AM_Pins[pin].Pin, mode);
}

void digitalWrite(byte pin, byte value)
{
	// todo: Check if pin is in INPUT mode, pullup resistor is enabled.
	GPIOSetValue(AM_Pins[pin].Port, AM_Pins[pin].Pin, value);
}

byte digitalRead(byte pin)
{
	// Check bitVal is a binary value - 0 or 1
	pin = pin % sizeof(AM_Pins); // todo: What does Arduino do for pins > max?
	AM_LCPXPin lcpxPin = AM_Pins[pin];
	byte value = 0;
	switch ( lcpxPin.Port )
	{
	case PORT0:
		value = LPC_GPIO0->MASKED_ACCESS[(1<<lcpxPin.Pin)];
	break;
	case PORT1:
		value = LPC_GPIO1->MASKED_ACCESS[(1<<lcpxPin.Pin)];
	break;
	case PORT2:
		value = LPC_GPIO2->MASKED_ACCESS[(1<<lcpxPin.Pin)];
	break;
	case PORT3:
		value = LPC_GPIO3->MASKED_ACCESS[(1<<lcpxPin.Pin)];
	break;
	default:
	  break;
	}
  return(value ? HIGH : LOW);
}

word analogRead(byte pin)
{
	return((word)ADCRead(pin));
}

void analogWrite(byte pin, byte value)
{
	pwm(pin, 14399, value);
}

 void tone(byte pin, word frequency)
{
	 pwm(pin, frequency, 0x80);
}

void noTone(byte pin)
{
	  LPC_SYSCON->SYSAHBCLKCTRL &= ~(1<<8);  // Enable clock to timer 1
}

unsigned int micros()
{
	return(g_systemMicroTicks);
}

unsigned int millis()
{
	return(g_systemMilliTicks);
}

// todo: Check out "LPC1343 Code Base" which has SPI and ADC functions
// but SPI only for 1 port (?!).
#define SHIFTCLOCKMICROSECONDS 1	// 1 MHz.

/*------------------------------------------------------------------------------
  delays number of tick Systicks (happens every 1 ms)
  Taken from example program "systick".
 *------------------------------------------------------------------------------*/
void delay (uint32_t ms)
{
	uint32_t curTicks = millis();
	while ((millis() - curTicks) < ms);
}

void delayMicroseconds(unsigned int us)
{
	uint32_t curTicks = micros();
	while ((micros() - curTicks) < us);
}
void shiftOut(byte dataPin, byte clockPin, byte bitOrder, byte value)
{
	byte clockOut = HIGH;
	byte i;
	if(MSBFIRST == bitOrder)
	{
		for(i=7;i>=0;i--)
		{
			digitalWrite(dataPin, (value >> i & 0x1) ? HIGH : LOW);
			digitalWrite(clockPin, LOW == clockOut ? HIGH : LOW);
			delayMicroseconds(SHIFTCLOCKMICROSECONDS);
		}
	}
	else if(MSBLAST == bitOrder)
	{
		for(i=0;i<8;i++)
		{
			digitalWrite(dataPin, (value >> i & 0x1) ? HIGH : LOW);
			digitalWrite(clockPin, LOW == clockOut ? HIGH : LOW);
			delayMicroseconds(SHIFTCLOCKMICROSECONDS);
		}
	}
}
unsigned long pulseIn(byte pin, byte value, unsigned long timeout)
{
	// Wait for pin to go to the required value.
	unsigned long startTime = micros();
	while(value != digitalRead(pin))
	{
		if(timeout)
		{
			if(micros()-startTime >= timeout)
			{
				return(0);	// Timed out.
			}
		}
	}

	unsigned long pulseStart = micros();
	while(value == digitalRead(pin))
	{
		if(timeout)
		{
			if(micros()-startTime >= timeout)
			{
				return(0);	// Timed out.
			}
		}
	}

	return(micros() - pulseStart);	// todo: Will this hold when it rolls over?
}

// Renamed because C does not support overrides or defaults.
unsigned long pulseIn2(byte pin, byte value)
{
	return(pulseIn(pin, value, 0));
}

long min(long x, long y)
{
	return(x < y ? x : y);
}

long max(long x, long y)
{
	return(x > y ? x : y);
}

long abs(long x)
{
	return(x > 0 ? x : -x);
}

long constrain(long x, long a, long b)
{
	if(x<a)
	{
		return(a);
	}
	if(x>b)
	{
		return(b);
	}
	return(x);
}

int map(int value, int fromLow, int fromHigh, int toLow, int toHigh)
{
	float position = (fromHigh - fromLow) * (value - fromLow);
	return((toHigh-toLow) * position + toLow);
}

// Include math.h for pow(), sqrt(), sin() cos() and sin().

/* String - object
    * analogReference()	// todo: Is this supportable on LPC1343?

    * randomSeed()
    * random()

    * lowByte()
    * highByte()
    * bitRead()
    * bitWrite()
    * bitSet()
    * bitClear()
    * bit()

    * attachInterrupt()
    * detachInterrupt()

    * interrupts()
    * noInterrupts()

    * Serial */
int main (void)
{

  GPIOInit();
  ADCInit(ADC_CLK);

  g_systemMicroTicks = 0;
  g_systemMacroTicks = 0;

  /*
  if (SysTick_Config(SystemCoreClock / 1000)) { // Setup SysTick Timer for 1 msec interrupts
    while (1);                                  // Capture error
  }
  {
	  if ( !(SysTick->CTRL & SysTick_CTRL_CLKSOURCE_Msk) )
	  {
		// When external reference clock is used(CLKSOURCE in
		// Systick Control and register bit 2 is set to 0), the
		// SYSTICKCLKDIV must be a non-zero value and 2.5 times
		// faster than the reference clock.
		// When core clock, or system AHB clock, is used(CLKSOURCE
		// in Systick Control and register bit 2 is set to 1), the
		// SYSTICKCLKDIV has no effect to the SYSTICK frequency. See
		// more on Systick clock and status register in Cortex-M3
		// technical Reference Manual.
		LPC_SYSCON->SYSTICKCLKDIV = 0x08;
	  }
  }
  */

  // Initialise Timer16_0 to tick at rate of 1/2000th of second.
	// Note that as this is a 16 bit timer, the maximum count we can
	// load into timer is 0xFFFF, or 65535. Default clock speed
	// set up by CMSIS SystemInit function - SystemCoreClock - is
	// 72MHz or 72000000 Hz. Dividing this by 2000 is 36000 which is
	// within appropriate timer16 maximum. This could be extended
	// if timer routine extended to make use of Prescale Counter register
	// Note by default LPC_SYSCON->SYSAHBCLKDIV is 1.
  init_timer16(0, (SystemCoreClock/LPC_SYSCON->SYSAHBCLKDIV)/2000 );

  // Initialise counter that counts Timer16_0 ticks
  timer16_0_counter = 0;

  //Enable Timer16_0
  enable_timer16(0);


  setup(); // Arduino setup(), called once.

    while (1)                                /* Loop forever */
  {
	  loop();	// Arduino loop(), called until cows come home.
  }
}
